Factory Method Pattern (Virtual Constructor)

By Purpose: Creational
By Scope: Class

Examples:
    - One Class to Menage Object Creation at runtime

Issues:
    - Need to instantiate object at runtime but dont know which one (eg need to use transport, but dont know which transport,
    or need to create a document, but dont know which document)

Solution:
    - Create an interface or abstract class of the generic object (eg Transport) with the create() method
    Let concrete classes implement'extend this one

Intent:
    Define an INTERFACE for creating objects but lets subclasses decide which class to instantiate.
    Factory Method lets a class defer instantiation to subclasses

When:
    - Class can't expect the type of object it must CREATE
    - Subclasses must decide what types of objects are created

Structure:
    - Creator defines a factory method
    - ConcreteCreator, implemented by a subclass
    - Override factory method -> create desired product

Benefits:
    - Delegate object creation (dont have to know which type of object we need to create)
    - Hook for subclasses
    - Base class can provide a default implementation

Conclusion:
Factory Method pattern is great for:
    - Delegate object creation at runtime
    - don't know what type of class you need to create

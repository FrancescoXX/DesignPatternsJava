Abstract Factory (Kit)

in a nutshell: "Great for creating object families"

By Purpose: Creational
By Scope: Object

Examples:

Issues:
    - Different themes in same application
    - requirement: easy change theme
    - add new themes
    - avoid hard coded themes

Solution:
    - create a new factory interface
    - the interface defines a method on how object should be created
    - various concrete implementations. each one knows which class belongs to each other
        (eg PinkThemeWidgetFactory will create pink window and pink scrollbar)
    - Client (main class) only works with an abstraction

Intent:
    Provide an interface to create families of realted objects without specifying their concrete classes

When:
    - Creation of products independent from the application
    - Configuration of product families is required
    - Hide product implementationand only provide interface (can have multiple vendors with same interface)

Structure:
    - Introduce a widget factory
    - Have Product families & Concrete implementations
    - Client only works with an abstraction

Benefits:
    - Control the classes of object to be created
    - Exchanging product families easy
    - Promote consistency among products

Drawbacks:
    - Addition of new products is difficult -> extend factory interface
    (eg add the title property in addition to scrollbar and window)

Conclusion:
Abstract Factory pattern is great for:
    - Creating product families
    - Centralize creation logic
    - Provide client with an interface to simplify the creation of objects

Adapter Pattern (Wrapper)
For connect old legacy systems, not conform to standards

By Purpose: Structural
By Scope: Class And Object

Examples:

Issues:
    Have a new framwrok which uses interface A, and old system using interface B

Solution:
    Transform the Request of the Client -> Specific Request

Intent:
    Convert the interfface of a class into another intrface the clients expect. Adapter lets classes work together
    that couldn't otherwise because of incompatible interfaces

When:
    - want reuse an existing class
    - Combine unrelated classes with an incompatible interface

Structure: (2 types)
    1:  Have a specific target interface
        have an adaptee, for the class we want to adapt
        the adapter implements BOTH interfaces

    2:  Adapter reference to the adaptee object instead of impplememnting the interface

Collaboration:
    - Adapter forwards request to adaptee
        - this can be adapter itself (inheritance)
        - this can be a reference of the adaptee

Benefits:
    - Adapter can override adaptee behaviour -> it is a sublcass
    One Adapter -> can use many adaptees

Drawbacks:
    - Adapter doesen't work for:
        - classes with many subclasses -> can't extend them all (for example in java)
        - sometimes is hard to override adaptee behaviour (do we want this?)

Conclusion:
How much adapting does the adapter do?
    -   Complex adaptations will be hard to write
    -   Adapter is great to connect to legacy system
    -   Adapt one interface to another


Observer (Publish-Subscribe)

in a nutshell: "Subscribe to object changes"

By Purpose: Behavioral

Examples:

Issues:

Solution:


Intent:
    Define a one-to-many dependency betweeen object so that when one object changes state,
    all its dependents are notified and updated automatically

When:
    - Change one object -> change others
    - No idea how many objects needs to be changed
    - Object change notification
        -with preserving loose coupling
    - One object may notify another without knowing them directly

Structure:


Benefits:
    - Loose coupling between observers and subjects
    - Supporting a broadcast model

Drawbacks:
    - One change can result in mutiple unnecessary notifications
    - Clients dont'know the ripple effect

Conclusion:
Observer pattern is great for:
    - Observe state in other objects
    - Preserve loose coupling